@model IEnumerable<outofoffice.Models.OutOfOfficeHistory>

@{
    Layout = "_Layout";
}
<link href="~/css/formediaquery.css" rel="stylesheet" />
<link href="~/css/site.css" rel="stylesheet" />

<partial name="Index.cshtml" />

<div class="container-fluid main-container">
    <div class="row">
        <div class="col-12">
            <h2>Out of Office History</h2>
            <!-- Filter Section -->
            <div class="mb-3 position-relative">
                <input type="text" id="filterInput" class="form-control filterInput" placeholder="Filter by Application, Message, Status..." onkeyup="filterTable()" />
                <span id="clearIcon" class="position-absolute top-50 end-0 translate-middle-y px-2 clear-icon" onclick="clearInput()">X</span>
            </div>
            <div class="table-responsive">
                @if (Model.Any())
                {
                    <table class="table table-bordered text-center" id="historyTable">
                        <thead>
                            <tr>
                                <th onclick="sortTable(0)">Application <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(1)">Status <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(2)">Start Date <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(3)">End Date <i class="fas fa-sort"></i></th>
                                <th onclick="sortTable(4)">Message <i class="fas fa-sort"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.Application</td>
                                    <td>
                                        <span class="badge @(item.Status == "No" ? "badge-warning" : item.Status == "Yes" ? "badge-success" : "badge-secondary")">
                                            @(item.Status == "No" ? "Scheduled" : item.Status == "Yes" ? "Sent" : item.Status)
                                        </span>
                                    </td>
                                    @*<td>@Convert.ToDateTime(item.StartDate).ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@Convert.ToDateTime(item.EndDate).ToString("yyyy-MM-dd HH:mm")</td> *@

                                    <td>
                                        @(string.IsNullOrEmpty(item.StartDate?.ToString())
                                            ? "N/A"
                                            : Convert.ToDateTime(item.StartDate).ToString("yyyy-MM-dd HH:mm"))
                                    </td>
                                    <td>
                                        @(string.IsNullOrEmpty(item.EndDate?.ToString())
                                            ? "N/A"
                                            : Convert.ToDateTime(item.EndDate).ToString("yyyy-MM-dd HH:mm"))
                                    </td>

                                    <td>@item.Message</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div id="paginationControls" class="mt-3"></div>
                }
                else
                {
                    <p class="no-items">No items available.</p>
                }
            </div>
        </div>
    </div>
</div>

<script src="~/js/history.js"></script>


